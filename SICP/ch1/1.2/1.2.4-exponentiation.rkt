#lang sicp

(define (expt b n)
  (if (= n 0)
    1
    (* b (expt b (- n 1)))))

(expt 2 0)
(expt 2 1)
(expt 2 2)
(expt 2 3)
(expt 2 4)
(expt 2 5)
(expt 2 6)
(expt 2 7)
(expt 2 8)
(expt 2 9)
(expt 2 10)
(expt 2 11)

(define (expt-iter b n)
  (define (iter counter prod)
    (if (= counter 0)
      prod
      (iter (dec counter) (* prod b))))
  (iter n 1))

(expt-iter 2 0)
(expt-iter 2 1)
(expt-iter 2 2)
(expt-iter 2 3)
(expt-iter 2 4)
(expt-iter 2 5)
(expt-iter 2 6)
(expt-iter 2 7)
(expt-iter 2 8)
(expt-iter 2 9)
(expt-iter 2 10)
(expt-iter 2 11)

(define (even? n)
  (= (remainder n 2) 0))

(define (square x) (* x x))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))
      
(fast-expt 2 0)
(fast-expt 2 1)
(fast-expt 2 2)
(fast-expt 2 3)
(fast-expt 2 4)
(fast-expt 2 5)
(fast-expt 2 6)
(fast-expt 2 7)
(fast-expt 2 8)
(fast-expt 2 9)
(fast-expt 2 10)
(fast-expt 2 11)

; fast exp using iteration
; (iter N B A) := B^N * A is an invariant under transformation
(define (fast-expt-iter b n)
  (define (iter N B A)
    (cond ((= N 0) A)
          ((even? N) (iter (/ N 2) (square B) A))
          (else (iter (- N 1) B (* B A)))))
  (iter n b 1))

(fast-expt-iter 2 0)
(fast-expt-iter 2 1)
(fast-expt-iter 2 2)
(fast-expt-iter 2 3)
(fast-expt-iter 2 4)
(fast-expt-iter 2 5)
(fast-expt-iter 2 6)
(fast-expt-iter 2 7)
(fast-expt-iter 2 8)
(fast-expt-iter 2 9)
(fast-expt-iter 2 10)
(fast-expt-iter 2 11)