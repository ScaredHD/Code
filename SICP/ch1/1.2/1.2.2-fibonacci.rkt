#lang sicp

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1)) (fib (- n 2))))))

(fib 0)
(fib 1)
(fib 2)
(fib 3)
(fib 4)
(fib 5)
(fib 6)
(fib 7)
(fib 8)
(fib 9)
(fib 10)

(define (fib-iter n)
  (define (iter a b count)
    (if (= count 0)
      b
      (iter (+ a b) a (- count 1))))
  (iter 1 0 n))

(fib-iter 0)
(fib-iter 1)
(fib-iter 2)
(fib-iter 3)
(fib-iter 4)
(fib-iter 5)
(fib-iter 6)
(fib-iter 7)
(fib-iter 8)
(fib-iter 9)
(fib-iter 10)

(define (fib-iter2 n)
  (define (iter a b count)
    (if (= count n)
      b
      (iter (+ a b) a (inc count))))
  (iter 1 0 0))

(fib-iter2 0)
(fib-iter2 1)
(fib-iter2 2)
(fib-iter2 3)
(fib-iter2 4)
(fib-iter2 5)
(fib-iter2 6)
(fib-iter2 7)
(fib-iter2 8)
(fib-iter2 9)
(fib-iter2 10)